apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
  namespace: final
  labels:
    app: flask-app
    tier: frontend
spec:
  replicas: 1  # Single replica as required
  selector:
    matchLabels:
      app: flask-app
      tier: frontend
  template:
    metadata:
      labels:
        app: flask-app
        tier: frontend
    spec:
      serviceAccountName: clo835
      containers:
      - name: flask-app
        image: 746851085552.dkr.ecr.us-east-1.amazonaws.com/clo835-myapp:myapp_v2
        ports:
        - containerPort: 81
        env:
        # Database Configuration
        - name: DBHOST
          value: "mysql-service"
        - name: DBPORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DBPORT
        - name: DBUSER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DBUSER
        - name: DBPWD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DBPWD
        - name: DATABASE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DATABASE
        # Application Configuration
        - name: APP_COLOR
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: APP_COLOR
        - name: STUDENT_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: STUDENT_NAME
        - name: BACKGROUND_IMAGE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: BACKGROUND_IMAGE_URL
        # S3 Configuration
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: S3_BUCKET
        - name: S3_IMAGE_KEY
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: S3_IMAGE_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-creds
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-creds
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              name: aws-creds
              key: AWS_SESSION_TOKEN
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 81
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 81
          initialDelaySeconds: 5
          periodSeconds: 5 